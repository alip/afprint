#!/usr/bin/env perl
# vim: set sw=4 et sts=4 tw=120 :
# Copyright 2010 Ali Polatel <alip@exherbo.org>
# Based in part upon Audio::Ofa::Util which is:
#   Copyright 2008-2009 Christoph BuÃŸenius
# Distributed under the terms of the GNU General Public License v2

use warnings;
use strict;
use Carp;
use Data::Dumper;
use File::Basename;
use Getopt::Long;
use LWP::UserAgent;
use Time::HiRes;
use XML::Simple;

my %musicdns_parameters = (
    client_id      => ['cid', '0a2cbb45cbbe7af5bf61ea5048d7f789'],
    client_version => ['cvr', basename($0) . '-@MYVERSION@'],
    fingerprint    => ['fpt', undef],
    metadata       => ['rmd', 1],
    bitrate        => ['brt', 0],
    extension      => ['fmt', undef],
    duration       => ['dur', undef],
    artist         => ['art', 'unknown'],
    title          => ['ttl', 'unknown'],
    album          => ['alb', 'unknown'],
    track          => ['tnm', 0],
    genre          => ['gnr', 'unknown'],
    year           => ['yrr', 0],
);

sub about {
    my $sig = shift;
    my $prog = basename($0);
    my $version = '@MYVERSION@';
    my $githead = '@MYGITHEAD@';
    print "$prog-$version$githead\n";
    exit($sig);
}

sub usage {
    my $sig = shift;
    my $prog = basename($0);
    print <<EOH;
Usage: $prog [-hVv0]
    -h, --help          Display usage and exit
    -V, --version       Display version and exit
    -v, --verbose       Be verbose
    -0, --null          Expect input is null delimited
    -m, --musicbrainz   Look up PUIDs from MusicBrainz
                        (requires WebService-MusicBrainz)
    -l, --limit         Limit results to the given number
$prog reads filename, duration and audio fingerprint from standard input
EOH
    exit($sig);
}

sub quote {
    my $s = shift;
    $s =~ "s/'/'\\''/g";
    return "'" . $s . "'";
}

sub lim {
    my @a = shift;
    my $l = shift;

    if ($l >= 0) {
        if ($l >= scalar(@a)) {
            $l = scalar(@a) - 1;
        }
        return @a[0..$l];
    }
    return @a;
}

sub lookup {
    my $ext = shift;
    my $dur = shift;
    my $fp  = shift;

    my %req_params;
    while (my ($key, $val) = each %musicdns_parameters) {
        my ($param, $default) = @$val;

        if ($key eq "extension") {
            $req_params{$param} = $ext;
        }
        elsif ($key eq "duration") {
            $req_params{$param} = $dur;
        }
        elsif ($key eq "fingerprint") {
            $req_params{$param} = $fp;
        }
        else {
            $req_params{$param} = $default;
        }
    }
    utf8::encode($_) for values %req_params;

    my $url = 'http://ofa.musicdns.org/ofa/1/track';
    my $ua = LWP::UserAgent->new;
    $ua->env_proxy;

    my $response = $ua->post($url, \%req_params);

    unless ($response->is_success) {
        croak 'Server says ' . $response->status_line;
    }
    unless ('text/xml' eq $response->header('Content-Type')) {
        croak 'Unexpected content type: ' . $response->header('Content-Type');
    }
    unless (defined $response->content) {
        croak 'No content';
    }

    my $xml = XMLin($response->content, ForceArray => ['track', 'puid']);

    my @ret = map {
        +{
            title => $_->{title},
            artist => $_->{artist}{name},
            puids => [keys %{$_->{'puid-list'}{puid}}],
        };
    } @{$xml->{track}};

    croak 'No tracks returned' unless @ret;
    return @ret;
}

# MusicBrainz demands that we not look up more often than once a second.
my $last_mb_lookup = 0;

sub mblookup {
    my $puid = shift;

    require WebService::MusicBrainz::Track;
    my $ws = WebService::MusicBrainz::Track->new();

    my $next_lookup_in = $last_mb_lookup + 1 - Time::HiRes::time();
    if ($next_lookup_in > 0 && $next_lookup_in < 1) {
        Time::HiRes::sleep($next_lookup_in);
    }
    $last_mb_lookup = Time::HiRes::time();

    local $@;
    local $SIG{__DIE__};

    my $resp = eval { $ws->search({ PUID => $puid }) };

    unless ($resp && $resp->track_list) {
        if ($@) {
            # search throws exception e.g. for "503 Service Temporarily
            # Unavailable" errors
            croak $@;
        }
        croak "Search failed";
    }

    return $resp->track_list;
}

my $null     =  0;
my $verbose  =  0;
my $limit    = -1;
my $mblookup =  0;
GetOptions(
    'v|verbose!'    => \$verbose,
    '0|null'        => \$null,
    'l|limit=i'     => \$limit,
    'm|musicbrainz' => \$mblookup,
    'V|version'     => sub { about(0) },
    'h|help'        => sub { usage(0) }
);

my $line = <STDIN>;
chomp($line);
my ($fn, $dur, $fp) = split($null ? "\0" : " ", $line);

my $ext = ($fn =~ m/([^.]+)$/)[0];
if ($ext eq $fn) {
    $ext = "unknown";
}

my @res = lookup($ext, $dur, $fp);
@res = lim(@res, $limit);

unless ($mblookup) {
    foreach (@res) {
        print "ARTIST=" . quote($_->{artist}) . "\n";
        print "TITLE=" . quote($_->{title}) . "\n";

        my $puid;
        foreach $puid ($_->{puids}[0]) {
            print "PUID=" . $puid . "\n";
        }
    }
    exit(0);
}

foreach (@res) {
    my $puid;
    foreach $puid ($_->{puids}[0]) {
        my @tracks = mblookup($puid);
        @tracks = lim(@tracks, $limit);

        my $track;
        foreach $track (@tracks) {
            print "PUID=" . $puid . "\n";
            print "TRACKID=" . $track->id . "\n";
            print "ARTISTID=" . $track->artist->id . "\n";
            print "ARTIST=" . quote($track->artist->name) . "\n";
            print "TITLE=" . quote($track->title) . "\n";
            print "TRACK=" . (($track->release_list->releases->[0]->track_list->offset || 0) + 1) . "\n";
            print "ALBUM=" . quote($track->release_list->releases->[0]->title) . "\n";
        }
    }
}
